{"version":3,"sources":["index.tsx"],"names":["React","BusinessInformation","BusinessInformationController","useLanguage","OText","BusinessInformationContainer","WrapMainContent","GrayBackground","WrapScheduleBlock","ScheduleBlock","WrapBusinessMap","InnerContent","StyleSheet","BusinessBasicInformation","GoogleMap","BusinessInformationUI","props","businessState","businessSchedule","businessLocation","t","daysOfWeek","scheduleFormatted","hour","minute","checkTime","val","businessCoordinate","lat","business","location","lng","businessImage","uri","logo","businessMarker","latlng","image","styles","wrapMapStyle","name","address","length","map","schedule","i","lapses","open","close","create","borderRadius","overflow","marginTop","marginBottom","BusinessInformationProps","UIComponent"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {\r\n  BusinessInformation as BusinessInformationController,\r\n  useLanguage\r\n} from 'ordering-components/native'\r\nimport { OText } from '../shared'\r\nimport {\r\n  BusinessInformationContainer,\r\n  WrapMainContent,\r\n  GrayBackground,\r\n  WrapScheduleBlock,\r\n  ScheduleBlock,\r\n  WrapBusinessMap,\r\n  InnerContent\r\n} from './styles'\r\nimport { StyleSheet } from 'react-native'\r\nimport { BusinessBasicInformation } from '../BusinessBasicInformation'\r\nimport { BusinessInformationParams } from '../../types'\r\nimport { GoogleMap } from '../GoogleMap'\r\nconst BusinessInformationUI = (props: BusinessInformationParams) => {\r\n  const {\r\n    businessState,\r\n    businessSchedule,\r\n    businessLocation\r\n  } = props\r\n  const [, t] = useLanguage()\r\n  const daysOfWeek = [\r\n    t('SUNDAY_ABBREVIATION', 'Sun'),\r\n    t('MONDAY_ABBREVIATION', 'Mon'),\r\n    t('TUESDAY_ABBREVIATION', 'Tues'),\r\n    t('WEDNESDAY_ABBREVIATION', 'Wed'),\r\n    t('THURSDAY_ABBREVIATION', 'Thur'),\r\n    t('FRIDAY_ABBREVIATION', 'Fri'),\r\n    t('SATURDAY_ABBREVIATION', 'Sat')\r\n  ]\r\n  const scheduleFormatted = ({ hour, minute } : {hour : number | string, minute : number | string}) => {\r\n    const checkTime = (val : number | string) => val < 10 ? `0${val}` : val\r\n    return `${checkTime(hour)}:${checkTime(minute)}`\r\n  }\r\n  const businessCoordinate = {\r\n    lat: businessState?.business?.location?.lat,\r\n    lng: businessState?.business?.location?.lng\r\n  }\r\n  const businessImage = {\r\n    uri: businessState?.business?.logo\r\n  }\r\n  const businessMarker = {\r\n    latlng: businessCoordinate,\r\n    image: businessImage\r\n  }\r\n\r\n  return (\r\n    <BusinessInformationContainer>\r\n      <BusinessBasicInformation\r\n        isBusinessInfoShow\r\n        businessState={businessState}\r\n      />\r\n      <WrapMainContent>\r\n        <InnerContent>\r\n          <GrayBackground>\r\n            <OText size={16} weight='bold'>{t('BUSINESS_LOCATION', 'Business Location')}</OText>\r\n          </GrayBackground>\r\n          {businessLocation.location && (\r\n            <WrapBusinessMap style={styles.wrapMapStyle}>\r\n              <GoogleMap\r\n                readOnly\r\n                location={businessLocation.location}\r\n                markerTitle={businessState?.business?.name}\r\n              />\r\n            </WrapBusinessMap>\r\n          )}\r\n          <OText mBottom={20}>\r\n            {businessState?.business?.address}\r\n          </OText>\r\n          <GrayBackground>\r\n            <OText size={16} weight='bold'>\r\n              {t('BUSINESS_OPENING_TIME', 'Business Opening Time')}\r\n            </OText>\r\n          </GrayBackground>\r\n          {businessSchedule && businessSchedule?.length > 0 && (\r\n            <WrapScheduleBlock horizontal>\r\n              {businessSchedule.map((schedule: any, i: number) => (\r\n                <ScheduleBlock key={i}>\r\n                  <OText size={20}>{daysOfWeek[i]}</OText>\r\n                  <OText>{scheduleFormatted(schedule.lapses[0].open)}</OText>\r\n                  <OText>{scheduleFormatted(schedule.lapses[0].close)}</OText>\r\n                </ScheduleBlock>\r\n              ))}\r\n            </WrapScheduleBlock>\r\n          )}\r\n        </InnerContent>\r\n      </WrapMainContent>\r\n    </BusinessInformationContainer>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  wrapMapStyle: {\r\n    borderRadius: 10,\r\n    overflow: 'hidden',\r\n    marginTop: 20,\r\n    marginBottom: 10\r\n  }\r\n})\r\n\r\nexport const BusinessInformation = (props : BusinessInformationParams) => {\r\n  const BusinessInformationProps = {\r\n    ...props,\r\n    UIComponent: BusinessInformationUI\r\n  }\r\n  return <BusinessInformationController {...BusinessInformationProps} />\r\n}\r\n"]}