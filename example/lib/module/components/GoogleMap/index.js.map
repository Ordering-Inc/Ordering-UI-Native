{"version":3,"sources":["index.tsx"],"names":["React","useState","useEffect","useRef","Dimensions","StyleSheet","View","MapView","PROVIDER_GOOGLE","Marker","Geocoder","useLanguage","useConfig","Alert","OIcon","GoogleMap","props","location","handleChangeAddressMap","maxLimitLocation","readOnly","markerTitle","saveLocation","setSaveLocation","handleToggleMap","locations","t","configState","width","height","get","ASPECT_RATIO","markerPosition","setMarkerPosition","latitude","lat","longitude","lng","region","setRegion","latitudeDelta","longitudeDelta","mapRef","googleMapsApiKey","configs","google_maps_api_key","value","center","alertState","setAlertState","open","content","key","mapErrors","ERROR_NOT_FOUND_ADDRESS","ERROR_MAX_LIMIT_LOCATION","MARKERS","map","geocodePosition","pos","from","then","results","zipcode","length","component","address_components","addressType","types","short_name","address","formatted_address","geometry","place_id","details","setMapErrors","catch","err","message","validateResult","curPos","loc1","loc2","distance","calculateDistance","pointA","pointB","lat1","lon1","lat2","lon2","R","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","handleChangeRegion","coordinates","closeAlert","errKey","fitAllMarkers","current","fitToCoordinates","edgePadding","top","right","bottom","left","animated","init","interval","setInterval","clearInterval","styles","i","title","icon","create","absoluteFillObject"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Dimensions, StyleSheet, View, Image } from 'react-native';\r\nimport MapView, { PROVIDER_GOOGLE, Marker, Region } from 'react-native-maps'\r\nimport Geocoder from 'react-native-geocoding';\r\nimport { useLanguage, useConfig } from 'ordering-components/native'\r\nimport { GoogleMapsParams } from '../../types';\r\nimport Alert from '../../providers/AlertProvider'\r\nimport { OIcon, OText } from '../shared';\r\n\r\nexport const GoogleMap = (props: GoogleMapsParams) => {\r\n\r\n  const {\r\n    location,\r\n    handleChangeAddressMap,\r\n    maxLimitLocation,\r\n    readOnly,\r\n    markerTitle,\r\n    saveLocation,\r\n    setSaveLocation,\r\n    handleToggleMap,\r\n    locations\r\n  } = props\r\n\r\n  const [, t] = useLanguage()\r\n  const [configState] = useConfig()\r\n  const { width, height } = Dimensions.get('window');\r\n  const ASPECT_RATIO = width / height;\r\n  const [markerPosition, setMarkerPosition] = useState({ latitude: locations ? locations[2].lat : location.lat, longitude: locations ? locations[2].lng : location.lng })\r\n  const [region, setRegion] = useState({\r\n    latitude: location.lat,\r\n    longitude: location.lng,\r\n    latitudeDelta: 0.0005,\r\n    longitudeDelta: 0.0005 * ASPECT_RATIO\r\n  })\r\n  let mapRef = useRef<any>(null)\r\n  const googleMapsApiKey = configState?.configs?.google_maps_api_key?.value\r\n\r\n  const center = { lat: location?.lat, lng: location?.lng }\r\n  const [alertState, setAlertState] = useState<{ open: boolean, content: Array<string>, key?: string | null }>({ open: false, content: [], key: null })\r\n  const mapErrors: any = {\r\n    ERROR_NOT_FOUND_ADDRESS: 'Sorry, we couldn\\'t find an address',\r\n    ERROR_MAX_LIMIT_LOCATION: `Sorry, You can only set the position to ${maxLimitLocation}m`\r\n  }\r\n  const MARKERS = locations && locations.map((location: { lat: number, lng: number }) => {\r\n    return {\r\n      latitude: location.lat,\r\n      longitude: location.lng\r\n    }\r\n  })\r\n  const geocodePosition = (pos: { latitude: number, longitude: number }) => {\r\n    Geocoder.from({\r\n      latitude: pos.latitude,\r\n      longitude: pos.longitude\r\n    }).then(({ results }) => {\r\n      let zipcode = null\r\n      if (results && results.length > 0) {\r\n        for (const component of results[0].address_components) {\r\n          const addressType = component.types[0]\r\n          if (addressType === 'postal_code') {\r\n            zipcode = component.short_name\r\n            break\r\n          }\r\n        }\r\n        const address = {\r\n          address: results[0]?.formatted_address,\r\n          location: results[0]?.geometry?.location,\r\n          zipcode,\r\n          place_id: results[0]?.place_id,\r\n        }\r\n        const details = {\r\n          geometry: { location: { lat: pos.latitude, lng: pos.longitude } }\r\n        }\r\n        handleChangeAddressMap && handleChangeAddressMap(address, details)\r\n        setSaveLocation && setSaveLocation(false)\r\n        handleToggleMap && handleToggleMap()\r\n      } else {\r\n        setMapErrors && setMapErrors('ERROR_NOT_FOUND_ADDRESS')\r\n      }\r\n    }).catch(err => {\r\n      setMapErrors && setMapErrors(err.message)\r\n    })\r\n  }\r\n\r\n  const validateResult = (curPos: { latitude: number, longitude: number }) => {\r\n    const loc1 = center\r\n    const loc2 = curPos\r\n    const distance = calculateDistance(loc1, loc2)\r\n\r\n    if (!maxLimitLocation) {\r\n      geocodePosition(curPos)\r\n      setMarkerPosition(curPos)\r\n      setRegion({ ...region, longitude: curPos.longitude, latitude: curPos.latitude })\r\n      return\r\n    }\r\n\r\n    if (distance <= maxLimitLocation) {\r\n      setMarkerPosition(curPos)\r\n      setRegion({ ...region, longitude: curPos.longitude, latitude: curPos.latitude })\r\n    } else {\r\n      setMapErrors && setMapErrors('ERROR_MAX_LIMIT_LOCATION')\r\n      setMarkerPosition({ latitude: center.lat, longitude: center.lng })\r\n    }\r\n  }\r\n\r\n  const calculateDistance = (pointA: { lat: number, lng: number }, pointB: { latitude: number, longitude: number }) => {\r\n\r\n    const lat1 = pointA.lat;\r\n    const lon1 = pointA.lng;\r\n\r\n    const lat2 = pointB.latitude;\r\n    const lon2 = pointB.longitude;\r\n\r\n    const R = 6371e3;\r\n    const φ1 = lat1 * (Math.PI / 180);\r\n    const φ2 = lat2 * (Math.PI / 180);\r\n    const Δφ = (lat2 - lat1) * (Math.PI / 180);\r\n    const Δλ = (lon2 - lon1) * (Math.PI / 180);\r\n\r\n    const a = (Math.sin(Δφ / 2) * Math.sin(Δφ / 2)) +\r\n      ((Math.cos(φ1) * Math.cos(φ2)) * (Math.sin(Δλ / 2) * Math.sin(Δλ / 2)));\r\n\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    const distance = R * c;\r\n    return distance;\r\n  }\r\n\r\n  const handleChangeRegion = (coordinates: Region) => {\r\n    validateResult(coordinates)\r\n  }\r\n\r\n  const closeAlert = () => {\r\n    setAlertState({\r\n      open: false,\r\n      content: []\r\n    })\r\n  }\r\n\r\n  const setMapErrors = (errKey: string) => {\r\n    setAlertState({\r\n      open: true,\r\n      content: !(errKey === 'ERROR_MAX_LIMIT_LOCATION')\r\n        ? [t(errKey, mapErrors[errKey])]\r\n        : [`${t(errKey, mapErrors[errKey])} ${maxLimitLocation} ${t('METTERS', 'meters')}`],\r\n      key: errKey\r\n    })\r\n  }\r\n\r\n  const fitAllMarkers = () => {\r\n    mapRef.current.fitToCoordinates(MARKERS, {\r\n      edgePadding: { top: 80, right: 80, bottom: 80, left: 80 },\r\n      animated: true,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    Geocoder.init(googleMapsApiKey)\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    if (saveLocation) {\r\n      geocodePosition(markerPosition)\r\n    }\r\n  }, [saveLocation])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (mapRef.current) {\r\n        fitAllMarkers()\r\n      }\r\n    }, 1000)\r\n    return () => clearInterval(interval)\r\n  }, [locations])\r\n\r\n  return (\r\n    <>\r\n      <MapView\r\n        provider={PROVIDER_GOOGLE}\r\n        initialRegion={region}\r\n        style={styles.map}\r\n        onRegionChangeComplete={!readOnly ? (coordinates) => handleChangeRegion(coordinates) : () => { }}\r\n        zoomTapEnabled\r\n        zoomEnabled\r\n        zoomControlEnabled\r\n        ref={mapRef}\r\n      >\r\n        {locations ? (\r\n          <>\r\n            {MARKERS && MARKERS.map((location: { latitude: number, longitude: number }, i: number) => (\r\n              <React.Fragment key={i}>\r\n                {\r\n                  <Marker\r\n                    coordinate={location}\r\n                    title={locations[i]?.title}\r\n                  >\r\n                    <View>\r\n                      <OIcon url={locations[i].icon} width={50} height={50} />\r\n                    </View>\r\n                  </Marker>\r\n                }\r\n              </React.Fragment>\r\n            ))}\r\n          </>\r\n        ) : (\r\n          <Marker\r\n            coordinate={markerPosition}\r\n            title={markerTitle || t('YOUR_LOCATION', 'Your Location')}\r\n          />\r\n        )}\r\n      </MapView>\r\n      <Alert\r\n        open={alertState.open}\r\n        onAccept={closeAlert}\r\n        onClose={closeAlert}\r\n        content={alertState.content}\r\n        title={t('ERROR', 'Error')}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  map: {\r\n    ...StyleSheet.absoluteFillObject,\r\n  }\r\n})\r\n"]}