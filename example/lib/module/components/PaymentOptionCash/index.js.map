{"version":3,"sources":["index.tsx"],"names":["React","useEffect","useState","StyleSheet","useUtils","useLanguage","PCContainer","PCForm","PCWrapper","OInput","OText","colors","PaymentOptionCash","props","orderTotal","onChangeData","setErrorCash","t","parsePrice","value","setvalue","handleChangeCash","cash","parseFloat","isNaN","fontSize","textAlign","e","styles","inputsStyle","errorMsg","create","borderColor","secundaryContrast","borderRadius","marginTop","width","height","maxHeight","color","error","fontWeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { useUtils, useLanguage } from 'ordering-components/native';\r\n\r\nimport { PCContainer, PCForm, PCWrapper } from './styles';\r\nimport { OInput, OText } from '../shared';\r\nimport { colors } from '../../theme';\r\n\r\nexport const PaymentOptionCash = (props: any) => {\r\n  const {\r\n    orderTotal,\r\n    onChangeData,\r\n    setErrorCash\r\n  } = props;\r\n  const [, t] = useLanguage();\r\n  const [{ parsePrice }] = useUtils();\r\n\r\n  const [value, setvalue] = useState('');\r\n\r\n  const handleChangeCash = (value: any) => {\r\n    let cash: any = parseFloat(value)\r\n    cash = isNaN(cash) ? '' : cash\r\n    setvalue(cash)\r\n    onChangeData && onChangeData({ cash })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (value && parseFloat(value) < orderTotal) {\r\n      setErrorCash && setErrorCash(true)\r\n    } else {\r\n      setErrorCash && setErrorCash(false)\r\n    }\r\n  }, [value, orderTotal])\r\n\r\n  return (\r\n    <PCContainer>\r\n      <PCForm>\r\n        <PCWrapper>\r\n          <OText style={{ fontSize: 16, textAlign: 'center' }}>\r\n            {t('NOT_EXACT_CASH_AMOUNT', 'Don\\'t have exact amount? Let us know with how much will you pay')}\r\n          </OText>\r\n          <OInput\r\n            placeholder='0'\r\n            onChange={(e: any) => handleChangeCash(e)}\r\n            style={styles.inputsStyle}\r\n            type='numeric'\r\n          />\r\n        </PCWrapper>\r\n        {!!value && parseFloat(value) < orderTotal && (\r\n          <OText style={styles.errorMsg}>\r\n            {`${t('VALUE_GREATER_THAN_TOTAL', 'This value must be greater than order total')}: ${parsePrice(orderTotal)}`}\r\n          </OText>\r\n        )}\r\n      </PCForm>\r\n    </PCContainer>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  inputsStyle: {\r\n    borderColor: colors.secundaryContrast,\r\n    borderRadius: 50,\r\n    marginTop: 10,\r\n    width: '100%',\r\n    height: 60,\r\n    maxHeight: 60\r\n  },\r\n  errorMsg: {\r\n    marginTop: 10,\r\n    color: colors.error,\r\n    fontSize: 16,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center'\r\n  }\r\n});\r\n\r\n"]}