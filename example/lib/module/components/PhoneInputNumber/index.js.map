{"version":3,"sources":["index.tsx"],"names":["React","useEffect","useRef","useState","PhoneInput","StyleSheet","useLanguage","useConfig","Wrapper","colors","OText","PhoneInputNumber","props","data","handleData","defaultValue","t","configs","phoneInput","userphoneNumber","setUserphoneNumber","handleChangeNumber","number","undefined","checkValid","current","isValidNumber","callingCode","getCallingCode","formattedNumber","getNumberAfterPossiblyEliminatingZero","regex","cellphone","slice","length","validNumber","test","error","phone","country_phone_code","default_country_code","value","text","withAlphaFilter","style","input","textAlign","marginTop","create","backgroundColor","white","borderRadius","borderWidth","borderColor","disabled","paddingVertical"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport PhoneInput from \"react-native-phone-number-input\";\r\nimport { StyleSheet } from 'react-native';\r\nimport { useLanguage, useConfig } from 'ordering-components/native';\r\n\r\nimport { Wrapper } from './styles'\r\n\r\nimport { colors } from '../../theme'\r\nimport { PhoneInputParams } from '../../types';\r\nimport { OText } from '../shared';\r\n\r\nexport const PhoneInputNumber = (props: PhoneInputParams) => {\r\n  const {\r\n    data,\r\n    handleData,\r\n    defaultValue\r\n  } = props\r\n\r\n  const [, t] = useLanguage()\r\n  const [{ configs }] = useConfig()\r\n  const phoneInput = useRef<PhoneInput>(null);\r\n  const [userphoneNumber, setUserphoneNumber] = useState('');\r\n\r\n  const handleChangeNumber = (number: any) => {\r\n    setUserphoneNumber(number)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if((defaultValue && userphoneNumber) || defaultValue === undefined || defaultValue === ''){\r\n      if (userphoneNumber) {\r\n        const checkValid = phoneInput.current?.isValidNumber(userphoneNumber);\r\n        const callingCode = phoneInput.current?.getCallingCode();\r\n        const formattedNumber = phoneInput.current?.getNumberAfterPossiblyEliminatingZero();\r\n        const regex = /^[0-9]*$/\r\n        const cellphone = userphoneNumber.slice(0, 0) + userphoneNumber.slice(1, userphoneNumber.length)\r\n        const validNumber = regex.test(cellphone)\r\n        if ((!checkValid && formattedNumber?.number) || !validNumber) {\r\n          handleData && handleData({\r\n            ...data,\r\n            error: t('INVALID_ERROR_PHONE_NUMBER', 'The Phone Number field is invalid')\r\n          })\r\n          return\r\n        }\r\n        handleData && handleData({\r\n          ...data,\r\n          error: '',\r\n          phone: {\r\n            country_phone_code: callingCode,\r\n            cellphone: formattedNumber?.number\r\n          }\r\n        })\r\n      } else {\r\n        handleData && handleData({\r\n          ...data,\r\n          error: '',\r\n          phone: {\r\n            country_phone_code: null,\r\n            cellphone: null\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }, [userphoneNumber])\r\n\r\n  return (\r\n    <Wrapper>\r\n      <PhoneInput\r\n        ref={phoneInput}\r\n        defaultValue={userphoneNumber || defaultValue}\r\n        defaultCode={configs?.default_country_code?.value}\r\n        onChangeFormattedText={(text) => handleChangeNumber(text)}\r\n        withDarkTheme\r\n        countryPickerProps={{withAlphaFilter:true}}\r\n        textContainerStyle={style.input}\r\n      />\r\n      {!!data?.error && (\r\n        <OText\r\n          size={16}\r\n          color={colors.error}\r\n          style={{ textAlign: 'center', marginTop: 5 }}\r\n          >\r\n          {data.error}\r\n        </OText>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst style = StyleSheet.create({\r\n  input: {\r\n    backgroundColor: colors.white,\r\n    borderRadius: 25,\r\n    borderWidth: 1,\r\n    borderColor: colors.disabled,\r\n    paddingVertical: 0\r\n  }\r\n})\r\n"]}