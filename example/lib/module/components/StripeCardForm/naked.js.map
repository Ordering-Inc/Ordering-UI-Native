{"version":3,"sources":["naked.tsx"],"names":["React","useState","useSession","useApi","useLanguage","useOrder","stripe","StripeCardForm","props","UIComponent","toSave","onNewCard","publicKey","requirements","handleSource","handleCustomSubmit","user","orderState","ordering","t","setOptions","publishableKey","state","setState","error","loading","stripeTokenHandler","tokenId","businessId","result","fetch","root","method","headers","Authorization","session","access_token","body","JSON","stringify","business_id","gateway","token_id","user_id","id","response","json","handleSubmit","creditCardData","paymentMethod","createPaymentMethod","card","number","values","replace","cvc","expMonth","parseInt","expiry","split","expYear","billingDetails","name","lastname","email","address","line1","options","postalCode","zipcode","type","brand","last4","e","toString","message","defaultProps","autosave"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useSession, useApi, useLanguage, useOrder } from 'ordering-components/native';\r\nimport stripe from 'tipsi-stripe';\r\n\r\nexport const StripeCardForm = (props: any) => {\r\n  const {\r\n    UIComponent,\r\n    toSave,\r\n    onNewCard,\r\n    publicKey,\r\n    requirements,\r\n    handleSource,\r\n    handleCustomSubmit\r\n  } = props;\r\n\r\n  const [{ user }] = useSession();\r\n  const [orderState] = useOrder();\r\n  const [ordering] = useApi();\r\n  const [, t] = useLanguage();\r\n\r\n  stripe.setOptions({\r\n    publishableKey: publicKey,\r\n    // androidPayMode: 'test', // Android only\r\n  })\r\n\r\n  const [state, setState] = useState<any>({ error: null, loading: false })\r\n\r\n  const stripeTokenHandler = async (tokenId: string, user: any, businessId: string) => {\r\n    try {\r\n      const result = await fetch(`${ordering.root}/payments/stripe/cards`, {\r\n        method: 'POST',\r\n        headers: {\r\n          Authorization: `Bearer ${user?.session?.access_token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          business_id: businessId,\r\n          gateway: 'stripe',\r\n          token_id: tokenId,\r\n          user_id: user?.id\r\n        })\r\n      })\r\n      const response = await result.json();\r\n      onNewCard && onNewCard(response.result);\r\n    } catch (error) {\r\n      setState({\r\n        ...state,\r\n        loading: false,\r\n        error\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async (creditCardData: any) => {\r\n    if (handleCustomSubmit) {\r\n      return handleCustomSubmit(creditCardData);\r\n    }\r\n\r\n    if (!stripe) {\r\n      setState({\r\n        ...state,\r\n        error: t('STRIPE_LOAD_ERROR', 'Faile to load Stripe properly')\r\n      })\r\n      return\r\n    }\r\n\r\n    setState({ ...state, loading: true });\r\n\r\n    try {\r\n      const paymentMethod = await stripe.createPaymentMethod({\r\n        card: {\r\n          number : creditCardData.values.number.replace(/ /g, ''),\r\n          cvc : creditCardData.values.cvc,\r\n          expMonth : parseInt(creditCardData.values.expiry.split('/')[0], 10),\r\n          expYear : parseInt(creditCardData.values.expiry.split('/')[1], 10)\r\n        },\r\n        billingDetails: {\r\n          name: `${user.name} ${user.lastname}`,\r\n          email: user.email,\r\n          address: {\r\n            line1: orderState.options.address.address,\r\n            postalCode: orderState.options.address.zipcode\r\n          }\r\n        }\r\n      });\r\n      if (paymentMethod?.error) {\r\n        setState({\r\n          ...state,\r\n          loading: false,\r\n          error: paymentMethod?.error\r\n        })\r\n        return\r\n      }\r\n      setState({ ...state, loading: false })\r\n      if (handleSource) {\r\n        handleSource && handleSource({\r\n          id: paymentMethod?.id,\r\n          type: 'card',\r\n          card: {\r\n            brand: paymentMethod?.card?.brand,\r\n            last4: paymentMethod?.card?.last4\r\n          }\r\n        })\r\n        return\r\n      }\r\n      toSave && stripeTokenHandler(paymentMethod?.id, user, props.businessId);\r\n    } catch (e) {\r\n      setState({\r\n        ...state,\r\n        loading: false,\r\n        error: e?.toString() || e?.message.toString()\r\n      })\r\n    }\r\n    setState({ ...state, loading: false });\r\n  };\r\n\r\n  return (\r\n    <UIComponent\r\n      {...props}\r\n      stateCardForm={state}\r\n      handleSubmit={handleSubmit}\r\n    />\r\n  )\r\n}\r\n\r\nStripeCardForm.defaultProps = {\r\n  autosave: true\r\n}\r\n"]}