{"version":3,"sources":["index.tsx"],"names":["React","useState","useEffect","useForm","StripeRedirectForm","StripeRedirectFormController","useSession","useLanguage","stripe","FormRedirect","FormGroup","ToastType","useToast","OButton","ODropDown","OText","colors","StripeRedirectFormUI","props","paymethods","publicKey","handleSubmitPaymentMethod","setOptions","publishableKey","showToast","control","handleSubmit","errors","user","t","paymentValue","setPaymentValue","onSubmit","values","console","log","handleChangeBankOption","option","Object","keys","length","list","stringError","map","item","i","message","Error","handleCreateSource","source","createSourceWithParams","type","amount","currency","returnURL","error","primary","color","stripeRedirectFormProps","UIComponent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { StripeRedirectForm as StripeRedirectFormController, useSession, useLanguage } from 'ordering-components/native';\r\nimport stripe from 'tipsi-stripe';\r\n\r\nimport {\r\n  FormRedirect,\r\n  FormGroup,\r\n  ErrorMessage\r\n} from './styles';\r\n\r\nimport { ToastType, useToast } from '../../providers/ToastProvider';\r\nimport { OButton, ODropDown, OInput, OText } from '../shared';\r\nimport { colors } from '../../theme';\r\nimport { IMAGES } from '../../config/constants';\r\n\r\nconst StripeRedirectFormUI = (props: any) => {\r\n  const {\r\n    paymethods,\r\n    publicKey,\r\n    handleSubmitPaymentMethod\r\n  } = props;\r\n\r\n  stripe.setOptions({\r\n    publishableKey: publicKey,\r\n    // androidPayMode: 'test', // Android only\r\n  })\r\n\r\n  const { showToast } = useToast();\r\n  const { control, handleSubmit, errors } = useForm();\r\n\r\n  const [{ user }] = useSession();\r\n  const [, t] = useLanguage();\r\n\r\n  const [paymentValue, setPaymentValue] = useState('-1');\r\n\r\n  const onSubmit = (values: any) => {\r\n    console.log('onSubmit', values);\r\n    // handleSubmitPaymentMethod && handleSubmitPaymentMethod();\r\n  }\r\n\r\n  const handleChangeBankOption = (option: any) => {\r\n    console.log('option', option);\r\n    // setPaymentValue(option.value)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length > 0) {\r\n      const list = Object.values(errors)\r\n      let stringError = ''\r\n      list.map((item: any, i: number) => {\r\n        stringError += (i + 1) === list.length ? `- ${item.message}` : `- ${item.message}\\n`\r\n      })\r\n      showToast(ToastType.Error, stringError)\r\n    }\r\n  }, [errors])\r\n\r\n  const handleCreateSource = async () => {\r\n    try {\r\n      // this.setState({ loading: true, source: null })\r\n      const source = await stripe.createSourceWithParams({\r\n        type: 'alipay',\r\n        amount: 50,\r\n        currency: 'USD',\r\n        returnURL: 'https://www.google.com/',\r\n      })\r\n      // this.setState({ loading: false, source })\r\n      console.log('source', source);\r\n    } catch (error) {\r\n      // this.setState({ loading: false })\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <FormRedirect>\r\n      <FormGroup>\r\n        <OText size={24}>{t('SELECT_A_PAYMENT_METHOD', 'Select a payment method')}</OText>\r\n        <ODropDown\r\n          options={paymethods}\r\n          defaultValue={paymentValue}\r\n          onSelect={(option: any) => handleChangeBankOption(option)}\r\n        />\r\n        {/* {errors.type && errors.type.type === 'required' && (\r\n          <ErrorMessage>{t('FIELD_REQUIRED', 'This field is required')}</ErrorMessage>\r\n        )} */}\r\n        {/* {errors && (\r\n          <OText>\r\n            {JSON.stringify(errors)}\r\n          </OText>\r\n        )} */}\r\n      </FormGroup>\r\n\r\n      {/* <FormGroup>\r\n        <Controller\r\n          control={control}\r\n          render={({ onChange, value }) => (\r\n            <OInput\r\n              placeholder={t('TYPE_ACCOUNT_HOLDER', 'Type an Account holder')}\r\n              // style={styles.inputStyle}\r\n              icon={IMAGES.user}\r\n              value={value}\r\n              onChange={(val: any) => onChange(val)}\r\n            />\r\n          )}\r\n          name=\"name\"\r\n          rules={{\r\n            required: t(`VALIDATION_ERROR_NAME_REQUIRED`, 'Name is required'),\r\n          }}\r\n          defaultValue={user?.name}\r\n        />\r\n      </FormGroup>\r\n\r\n      <FormGroup>\r\n        <Controller\r\n          control={control}\r\n          render={({ onChange, value }) => (\r\n            <OInput\r\n              placeholder={t('TYPE_AN_EMAIL', 'Type an email')}\r\n              icon={IMAGES.email}\r\n              value={value}\r\n              onChange={(val: any) => onChange(val)}\r\n              autoCapitalize='none'\r\n            />\r\n          )}\r\n          name=\"email\"\r\n          rules={{\r\n            required: t('VALIDATION_ERROR_EMAIL_REQUIRED', 'The field Email is required').replace('_attribute_', t('EMAIL', 'Email')),\r\n            pattern: {\r\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n              message: t('INVALID_ERROR_EMAIL', 'Invalid email address').replace('_attribute_', t('EMAIL', 'Email'))\r\n            }\r\n          }}\r\n          defaultValue={user?.email}\r\n        />\r\n      </FormGroup> */}\r\n\r\n      <OButton\r\n        // text={formState.isSubmitting ? t('LOADING', 'Loading...') : t('OK', 'OK')}\r\n        text={t('OK', 'OK')}\r\n        bgColor={colors.primary}\r\n        borderColor={colors.primary}\r\n        textStyle={{color: 'white'}}\r\n        imgRightSrc={null}\r\n        // isDisabled={formState.isSubmitting}\r\n        // onClick={() => handleSubmit(onSubmit)}\r\n        onClick={() => handleCreateSource()}\r\n      />\r\n    </FormRedirect>\r\n  )\r\n}\r\n\r\nexport const StripeRedirectForm = (props: any) => {\r\n  const stripeRedirectFormProps = {\r\n    ...props,\r\n    UIComponent: StripeRedirectFormUI\r\n  }\r\n  return <StripeRedirectFormController {...stripeRedirectFormProps} />\r\n}\r\n"]}