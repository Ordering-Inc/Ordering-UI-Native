{"version":3,"sources":["index.tsx"],"names":["React","useState","useEffect","Spinner","MaterialComIcon","StyleSheet","UpsellingPage","UpsellingPageController","useUtils","useLanguage","OText","OIcon","OModal","OBottomPopup","OButton","colors","Container","UpsellingContainer","Item","Details","AddButton","CloseUpselling","ProductForm","UpsellingProductsUI","props","isCustomMode","upsellingProducts","business","handleUpsellingPage","openUpselling","canOpenUpselling","setCanOpenUpselling","actualProduct","setActualProduct","modalIsOpen","setModalIsOpen","parsePrice","t","products","length","loading","handleFormProduct","product","handleSaveProduct","UpsellingLayout","error","map","id","images","styles","imageStyle","name","primary","price","message","closeUpsellingButton","api","businessId","slug","create","width","height","resizeMode","borderRadius","borderColor","backgroundColor","white","borderWidth","marginBottom","upsellingModal","top","UpsellingProducts","upsellingProductsProps","UIComponent"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect } from 'react'\r\nimport Spinner from 'react-native-loading-spinner-overlay';\r\nimport MaterialComIcon from 'react-native-vector-icons/MaterialCommunityIcons'\r\nimport { StyleSheet } from 'react-native'\r\nimport {\r\n  UpsellingPage as UpsellingPageController,\r\n  useUtils,\r\n  useLanguage\r\n} from 'ordering-components/native'\r\nimport { OText, OIcon, OModal, OBottomPopup, OButton } from '../shared'\r\nimport { colors } from '../../theme'\r\nimport { UpsellingProductsParams } from '../../types'\r\nimport {\r\n  Container,\r\n  UpsellingContainer,\r\n  Item,\r\n  Details,\r\n  AddButton,\r\n  CloseUpselling\r\n} from './styles'\r\nimport { ProductForm } from '../ProductForm';\r\nconst UpsellingProductsUI = (props: UpsellingProductsParams) => {\r\n  const {\r\n    isCustomMode,\r\n    upsellingProducts,\r\n    business,\r\n    handleUpsellingPage,\r\n    openUpselling,\r\n    canOpenUpselling,\r\n    setCanOpenUpselling\r\n  } = props\r\n  const [actualProduct, setActualProduct] = useState<any>(null)\r\n  const [modalIsOpen, setModalIsOpen] = useState(false)\r\n  const [{ parsePrice }] = useUtils()\r\n  const [, t] = useLanguage()\r\n\r\n  useEffect(() => {\r\n    if (!isCustomMode) {\r\n      if (upsellingProducts?.products?.length && !upsellingProducts.loading) {\r\n        setCanOpenUpselling && setCanOpenUpselling(true)\r\n      } else if (!upsellingProducts?.products?.length && !upsellingProducts.loading && !canOpenUpselling && openUpselling) {\r\n        handleUpsellingPage && handleUpsellingPage()\r\n      }\r\n    }\r\n  }, [upsellingProducts.loading, upsellingProducts?.products.length])\r\n\r\n  const handleFormProduct = (product: any) => {\r\n    setActualProduct(product)\r\n    setModalIsOpen(true)\r\n  }\r\n\r\n  const handleSaveProduct = () => {\r\n    setActualProduct(null)\r\n    setModalIsOpen(false)\r\n  }\r\n\r\n  const UpsellingLayout = () => {\r\n    return (\r\n      <Container>\r\n        <UpsellingContainer\r\n          horizontal\r\n          showsHorizontalScrollIndicator={false}\r\n        >\r\n          {\r\n            !upsellingProducts.loading ? (\r\n              <>\r\n                {\r\n                  !upsellingProducts.error ? upsellingProducts.products.map((product: any) => (\r\n                    <Item key={product.id}>\r\n                      <OIcon url={product.images} style={styles.imageStyle} />\r\n                      <Details>\r\n                        <OText size={12} numberOfLines={1} ellipsizeMode='tail'>{product.name}</OText>\r\n                        <OText color={colors.primary} weight='bold'>{parsePrice(product.price)}</OText>\r\n                      </Details>\r\n                      <AddButton onPress={() => handleFormProduct(product)}>\r\n                        <MaterialComIcon\r\n                          name='plus-circle'\r\n                          color={colors.primary}\r\n                          size={35}\r\n                        />\r\n                      </AddButton>\r\n                    </Item>\r\n                  )) : (\r\n                    <OText>\r\n                      {upsellingProducts.message}\r\n                    </OText>\r\n                  )\r\n                }\r\n              </>\r\n            ) : (\r\n              <Spinner visible={upsellingProducts.loading} />\r\n            )\r\n          }\r\n        </UpsellingContainer>\r\n      </Container>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n      {isCustomMode ? (\r\n        <UpsellingLayout />\r\n      ) : (\r\n        <>\r\n          {!canOpenUpselling || upsellingProducts?.products?.length === 0 ? null : (\r\n            <OBottomPopup\r\n              title={t('WANT_SOMETHING_ELSE', 'Do you want something else?')}\r\n              open={openUpselling}\r\n              onClose={() => handleUpsellingPage()}\r\n            >\r\n              <UpsellingLayout />\r\n              <CloseUpselling>\r\n                <OButton\r\n                  imgRightSrc=''\r\n                  text={t('NO_THANKS', 'No Thanks')}\r\n                  style={styles.closeUpsellingButton}\r\n                  onClick={() => handleUpsellingPage()}\r\n                />\r\n              </CloseUpselling>\r\n            </OBottomPopup>\r\n          )}\r\n        </>\r\n      )}\r\n      <OModal\r\n        open={modalIsOpen}\r\n        onClose={() => setModalIsOpen(false)}\r\n        entireModal\r\n        customClose\r\n      >\r\n        {actualProduct && (\r\n         <ProductForm\r\n          product={actualProduct}\r\n          businessId={actualProduct?.api?.businessId}\r\n          businessSlug={business.slug}\r\n          onSave={() => handleSaveProduct()}\r\n          onClose={() => setModalIsOpen(false)}\r\n        />\r\n        )}\r\n      </OModal>\r\n    </>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  imageStyle: {\r\n    width: 120,\r\n    height: 90,\r\n    resizeMode: 'cover',\r\n    borderRadius: 10\r\n  },\r\n  closeUpsellingButton: {\r\n    borderRadius: 25,\r\n    borderColor: colors.primary,\r\n    backgroundColor: colors.white,\r\n    borderWidth: 1,\r\n    height: 42,\r\n    marginBottom: 10\r\n  },\r\n  upsellingModal: {\r\n    height: '50%',\r\n    top: 250\r\n  }\r\n})\r\n\r\nexport const UpsellingProducts = (props : UpsellingProductsParams) => {\r\n  const upsellingProductsProps = {\r\n    ...props,\r\n    UIComponent: UpsellingProductsUI\r\n  }\r\n  return (\r\n    <UpsellingPageController {...upsellingProductsProps} />\r\n  )\r\n}\r\n"]}