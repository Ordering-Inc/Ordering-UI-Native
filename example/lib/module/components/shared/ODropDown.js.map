{"version":3,"sources":["ODropDown.tsx"],"names":["React","useState","useEffect","styled","css","ScrollView","TouchableOpacity","CustomScrollView","CustomTouchableOpacity","colors","Wrapper","View","Selected","props","bgcolor","secondary","lightGray","primary","white","SelectedLabel","Text","textcolor","DropIcon","Image","DropView","DropOption","selected","ODropDown","options","defaultValue","placeholder","onSelect","dropViewMaxHeight","isModal","isOpen","setIsOpen","defaultOption","find","option","value","selectedOption","setSelectedOption","setValue","onToggle","onSelectOption","name","_defaultOption","style","content","require","maxHeight","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components/native'\r\nimport { ScrollView, TouchableOpacity  } from 'react-native-gesture-handler'\r\nimport { ScrollView as CustomScrollView, TouchableOpacity as CustomTouchableOpacity } from 'react-native'\r\nimport { colors } from '../../theme'\r\n\r\ninterface Props {\r\n  secondary?: boolean,\r\n  options?: any;\r\n  defaultValue?: any,\r\n  placeholder?: string,\r\n  onSelect?: any,\r\n  style?: any,\r\n  dropViewMaxHeight?: any,\r\n  isModal?: any,\r\n  bgcolor?: string,\r\n  textcolor?: string,\r\n}\r\n\r\nconst Wrapper = styled.View`\r\n  position: relative;\r\n`\r\nconst Selected = styled.TouchableOpacity`\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n  border-width: 1px;\r\n  border-color: ${(props: any) => props.bgcolor || (props.secondary ? colors.lightGray : colors.primary)};\r\n  background-color: ${(props: any) => props.bgcolor || (props.secondary ? colors.white : colors.primary)};\r\n`\r\nconst SelectedLabel = styled.Text`\r\n  font-size: 16px;\r\n  color: ${(props: any) => props.textcolor || (props.secondary ? 'black' : colors.white)};\r\n`\r\nconst DropIcon = styled.Image`\r\n  tint-color: ${(props: any) => props.textcolor || (props.secondary ? 'black' : colors.white)};\r\n  resize-mode: contain;\r\n  width: 7px;\r\n  height: 7px;\r\n  margin-left: 5px;\r\n`\r\nconst DropView = styled.View`\r\n  position: absolute;\r\n  z-index: 9999;\r\n  top: 54px;\r\n  border-width: 1px;\r\n  border-color: ${colors.lightGray};\r\n  background-color: ${colors.white};\r\n  border-radius: 10px;\r\n  width: 100%;\r\n`\r\nconst DropOption = styled.Text`\r\n  padding: 15px;\r\n  font-size: 16px;\r\n  border-bottom-width: 1px;\r\n  border-bottom-color: ${colors.lightGray};\r\n  ${(props: any) => props.selected && css`\r\n    color: ${colors.primary};\r\n  `};\r\n`\r\nconst ODropDown = (props: Props) => {\r\n  const {\r\n    secondary,\r\n    options,\r\n    defaultValue,\r\n    placeholder,\r\n    onSelect,\r\n    dropViewMaxHeight,\r\n    isModal\r\n  } = props\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const defaultOption = options?.find((option: any) => option.value === defaultValue)\r\n  const [selectedOption, setSelectedOption] = useState<any>(defaultOption)\r\n  const [value, setValue] = useState(defaultValue)\r\n\r\n  const onToggle = () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const onSelectOption = (option: any) => {\r\n    setSelectedOption(option)\r\n    setValue(option.value)\r\n    onSelect(option.value || option.name)\r\n    setIsOpen(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const _defaultOption = options?.find((option: any) => option.value === defaultValue)\r\n    setSelectedOption(_defaultOption)\r\n    setValue(defaultValue)\r\n  }, [defaultValue, options])\r\n\r\n  return (\r\n    <Wrapper style={props.style}>\r\n      <Selected\r\n        secondary={secondary}\r\n        bgcolor={props.bgcolor}\r\n        onPress={() => onToggle()}\r\n      >\r\n        <SelectedLabel\r\n          secondary={secondary}\r\n          textcolor={props.textcolor}\r\n        >\r\n          {selectedOption?.content || selectedOption?.name || placeholder}\r\n        </SelectedLabel>\r\n        <DropIcon\r\n          textcolor={props.textcolor}\r\n          secondary={secondary}\r\n          source={require('../../assets/icons/drop_down.png')}\r\n        />\r\n      </Selected>\r\n      {isOpen && options && (\r\n        <DropView\r\n          secondary={secondary}\r\n        >\r\n          {!isModal ? (\r\n            <ScrollView style={{\r\n              maxHeight: dropViewMaxHeight || null }}\r\n            >\r\n              {options.map((option: any, index: number) => (\r\n                <TouchableOpacity\r\n                  key={index}\r\n                  onPress={() => onSelectOption(option)}\r\n                >\r\n                  <DropOption\r\n                    numberOfLines={1}\r\n                    selected={value === option.value}\r\n                  >\r\n                    {option.content || option.name}\r\n                  </DropOption>\r\n                </TouchableOpacity>\r\n              ))}\r\n            </ScrollView>\r\n          ) : (\r\n            <CustomScrollView style={{\r\n              maxHeight: dropViewMaxHeight || null }}\r\n            >\r\n              {options.map((option: any, index: number) => (\r\n                <CustomTouchableOpacity\r\n                  key={index}\r\n                  onPress={() => onSelectOption(option)}\r\n                >\r\n                  <DropOption\r\n                    numberOfLines={1}\r\n                    selected={value === option.value}\r\n                  >\r\n                    {option.content || option.name}\r\n                  </DropOption>\r\n                </CustomTouchableOpacity>\r\n              ))}\r\n            </CustomScrollView>\r\n          )}\r\n        </DropView>\r\n      )}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default ODropDown\r\n"]}