{"version":3,"sources":["ToastProvider.tsx"],"names":["React","ToastType","ToastContext","createContext","ToastProvider","children","toastConfig","setToastConfig","useState","showToast","type","message","duration","hideToast","useToast","useContext"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CAEA;;AACA,WAAYC,SAAZ,C,CAMA;;WANYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAgBZ;AACA,OAAO,MAAMC,YAAY,gBAAGF,KAAK,CAACG,aAAN,CAA6C,IAA7C,CAArB;AAEP,OAAO,MAAMC,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACrD;AACA;AACA,QAAM,CACFC,WADE,EAEFC,cAFE,IAGFP,KAAK,CAACQ,QAAN,CAAuC,IAAvC,CAHJ;;AAKA,WAASC,SAAT,CAAmBC,IAAnB,EAAoCC,OAApC,EAAqEC,QAAQ,GAAG,IAAhF,EAAsF;AAClF;AACAL,IAAAA,cAAc,CAAC;AAAEG,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,KAAD,CAAd;AACH;;AAED,WAASC,SAAT,GAAqB;AACjB;AACAN,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH;;AAED,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAED,MAAAA,WAAF;AAAeG,MAAAA,SAAf;AAA0BI,MAAAA;AAA1B;AAA9B,KACKR,QADL,CADJ;AAKH,CAvBM,C,CAyBP;;AAEA,OAAO,SAASS,QAAT,GAAoB;AACvB,SAAOd,KAAK,CAACe,UAAN,CAAiBb,YAAjB,CAAP;AACH","sourcesContent":["import * as React from \"react\";\r\n\r\n// Defines the three kinds of message that are displayed\r\nexport enum ToastType {\r\n    Info = \"INFO\",\r\n    Error = \"ERROR\",\r\n    Success = \"SUCCESS\",\r\n}\r\n\r\n// Defines the parameters required to display the toast\r\ntype ToastConfigType = { type: ToastType; message: string | Array<string>; duration: number };\r\n\r\n// The toast context exposes this object throughout the app\r\ntype ToastContextType = {\r\n    toastConfig: ToastConfigType | null;\r\n    showToast: (type: ToastType, message: string | Array<string>, duration?: number) => void;\r\n    hideToast: () => void;\r\n};\r\n\r\n// Creates the toast context\r\nexport const ToastContext = React.createContext<ToastContextType | null>(null);\r\n\r\nexport const ToastProvider: React.FC = ({ children }) => {\r\n    // Calls setToastConfig in order to control the toast\r\n    // toastConfig is null by default so the toast is hidden\r\n    const [\r\n        toastConfig,\r\n        setToastConfig,\r\n    ] = React.useState<ToastConfigType | null>(null);\r\n\r\n    function showToast(type: ToastType, message: string | Array<string>, duration = 4000) {\r\n        // Calls setToastConfig to show the toast\r\n        setToastConfig({ type, message, duration });\r\n    }\r\n\r\n    function hideToast() {\r\n        // Sets toast config to null in order to hide the toast\r\n        setToastConfig(null);\r\n    }\r\n\r\n    return (\r\n        <ToastContext.Provider value={{ toastConfig, showToast, hideToast }}>\r\n            {children}\r\n        </ToastContext.Provider>\r\n    );\r\n};\r\n\r\n// hook context\r\n\r\nexport function useToast() {\r\n    return React.useContext(ToastContext)!;\r\n}\r\n"]}