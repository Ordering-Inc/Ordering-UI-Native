{"version":3,"sources":["index.tsx"],"names":["React","useLanguage","FontAwesome","flatArray","arr","concat","getTraduction","key","t","keyList","ERROR_ORDER_WITHOUT_CART","ERROR_INVALID_COUPON","ERROR_IVALID_COUPON_MINIMUM","ERROR_ADD_PRODUCT_VERY_FAR_FOR_PICKUP","ERROR_PLACE_PAY_WITH_CARD2","ERROR_ADD_PRODUCT_BUSINESS_CLOSED","INTERNAL_ERROR","ERROR_NOT_FOUND_BUSINESSES","YOU_DO_NOT_HAVE_PERMISSION","INVALID_CODE","STRIPE_ERROR","ERROR_AUTH_TWILIO_DISABLED","convertHoursToMinutes","time","hour","minute","split","result","parseInt","getIconCard","brand","size","value","toLowerCase","getGoogleMapImage","lat","lng","apiKey","fieldsToSort","sortInputFields","fields","values","fieldsBase","fieldsSorted","fieldsArray","Array","isArray","Object","forEach","f","field","code","push"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useLanguage } from 'ordering-components/native';\r\nimport FontAwesome from 'react-native-vector-icons/FontAwesome';\r\nimport { colors } from '../theme';\r\n\r\nexport const flatArray = (arr: any) => [].concat(...arr)\r\n\r\n/**\r\n * Function to return the traduction depending of a key 't'\r\n * @param {string} key for traduction\r\n */\r\nexport const getTraduction = (key: string) => {\r\n  const [, t] = useLanguage()\r\n  const keyList: any = {\r\n    // Add the key and traduction that you need below\r\n    ERROR_ORDER_WITHOUT_CART: 'The order was placed without a cart',\r\n    ERROR_INVALID_COUPON: \"The coupon doesn't exist\",\r\n    ERROR_IVALID_COUPON_MINIMUM: 'You must have more products in your cart to use the coupon',\r\n    ERROR_ADD_PRODUCT_VERY_FAR_FOR_PICKUP: 'The business is too far for order type pickup',\r\n    ERROR_PLACE_PAY_WITH_CARD2: 'An error occurred while trying to pay by card',\r\n    ERROR_ADD_PRODUCT_BUSINESS_CLOSED: 'The business is closed at the moment',\r\n    INTERNAL_ERROR: 'Server Error, please wait, we are working to fix it',\r\n    ERROR_NOT_FOUND_BUSINESSES: 'No businesses found near your location',\r\n    YOU_DO_NOT_HAVE_PERMISSION: 'You do not have permission',\r\n    INVALID_CODE: 'Invalid verify code',\r\n    STRIPE_ERROR: 'Payment service error. Try again later.',\r\n    ERROR_AUTH_TWILIO_DISABLED: 'Auth error, twilio is disabled'\r\n  }\r\n\r\n  return keyList[key] ? t(key, keyList[key]) : t(key)\r\n}\r\n\r\n/**\r\n * Function to convert delivery time in minutes\r\n * @param {string} time business delivery time\r\n */\r\nexport const convertHoursToMinutes = (time: any) => {\r\n  if (!time) return '0min'\r\n  const [hour, minute] = time.split(':')\r\n  const result = (parseInt(hour, 10) * 60) + parseInt(minute, 10)\r\n  return `${result}min`\r\n}\r\n\r\nexport const getIconCard = (brand: string, size: number) => {\r\n  const value = brand?.toLowerCase()\r\n  switch (value) {\r\n    case 'visa':\r\n      return (\r\n        <FontAwesome\r\n          name='cc-visa'\r\n          size={size}\r\n          color={'#000'}\r\n        />\r\n      )\r\n    case 'mastercard':\r\n      return (\r\n        <FontAwesome\r\n          name='cc-mastercard'\r\n          size={size}\r\n          color={'#000'}\r\n        />\r\n      )\r\n    case 'amex':\r\n      return (\r\n        <FontAwesome\r\n          name='cc-amex'\r\n          size={size}\r\n          color={'#000'}\r\n        />\r\n      )\r\n    case 'discover':\r\n      return (\r\n        <FontAwesome\r\n          name='cc-discover'\r\n          size={size}\r\n          color={'#000'}\r\n        />\r\n      )\r\n    case 'jcb':\r\n      return (\r\n        <FontAwesome\r\n          name='cc-jcb'\r\n          size={size}\r\n          color={'#000'}\r\n        />\r\n      )\r\n    case 'diners-club':\r\n      return (\r\n        <FontAwesome\r\n          name='cc-diners-club'\r\n          size={size}\r\n          color={'#000'}\r\n        />\r\n      )\r\n    default:\r\n      return (\r\n        <FontAwesome\r\n          name='credit-card-alt'\r\n          size={size}\r\n          color={'#000'}\r\n        />\r\n      )\r\n  }\r\n}\r\n/**\r\n * Function to return a static google maps image based in location\r\n * @param {object} param object with latitude and logitude\r\n */\r\n export const getGoogleMapImage = ({ lat, lng }: any, apiKey: string) => {\r\n  return `https://maps.googleapis.com/maps/api/staticmap?size=500x190&center=${lat},${lng}&zoom=17&scale=2&maptype=roadmap&&markers=icon:https://res.cloudinary.com/ditpjbrmz/image/upload/f_auto,q_auto,w_45,q_auto:best,q_auto:best/v1564675872/marker-customer_kvxric.png%7Ccolor:white%7C${lat},${lng}&key=${apiKey}`\r\n}\r\n/**\r\n * List of fields with correct order\r\n */\r\nexport const fieldsToSort = ['name', 'middle_name', 'lastname', 'second_lastname', 'email'];\r\n/**\r\n * Function to return a array sorted by certain fields\r\n * @param fields Array with right order\r\n * @param array Array to sort\r\n */\r\nexport const sortInputFields = ({ fields, values }: any) => {\r\n  let fieldsBase = fields;\r\n  const fieldsSorted: any = [];\r\n  const fieldsArray = Array.isArray(values) ? values : Object.values(values);\r\n\r\n  if (!fieldsBase) {\r\n    fieldsBase = fieldsToSort\r\n  }\r\n\r\n  fieldsBase.forEach((f: any) => {\r\n    fieldsArray.forEach((field: any) => {\r\n      if (f === field.code) {\r\n        fieldsSorted.push(field)\r\n      }\r\n    })\r\n  });\r\n  return fieldsSorted;\r\n}\r\n"]}