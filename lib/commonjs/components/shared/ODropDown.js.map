{"version":3,"sources":["ODropDown.tsx"],"names":["Wrapper","styled","View","colors","primary","InnerWrapper","TouchableOpacity","SelLabel","Text","DropIcon","Image","KindIcon","DropView","DropItems","ODropDown","props","curIndex","onSelect","React","useState","selectedIndex","items","getItems","isOpen","onOffToggle","value","setValue","onSelectItem","index","useEffect","alert","onToggle","is_opened","style","kindImage","placeholder","tintColor","dropIconColor","require","map","item"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport { TouchableOpacity } from 'react-native'\r\nimport styled from 'styled-components/native'\r\nimport { colors } from '../../theme'\r\n\r\nexport interface ODropDownProps {\r\n    items?: Array<string>,\r\n    onSelect?: any,\r\n    selectedIndex?: number,\r\n    kindImage?: any,\r\n    placeholder?: string,\r\n    style?: any,\r\n    dropIconColor?: string\r\n}\r\n\r\nconst Wrapper = styled.View`\r\n    background-color: white;\r\n    padding: 10px 14px;\r\n    border-radius: 20px;\r\n    border-width: 1px;\r\n    border-color: ${colors.primary}\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\nconst InnerWrapper = styled.TouchableOpacity`\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n`\r\nconst SelLabel = styled.Text`\r\n    flex: 1;\r\n    font-family: 'Poppins-Regular';\r\n    color: grey;\r\n    flex-grow: 1;\r\n    margin: 0 10px;\r\n`\r\nconst DropIcon = styled.Image`\r\n    tint-color: ${colors.primary};\r\n    resize-mode: contain;\r\n    width: 7px;\r\n    height: 7px;\r\n`\r\nconst KindIcon = styled.Image`\r\n    tint-color: ${colors.primary};\r\n    resize-mode: contain;\r\n    width: 14px;\r\n    height: 14px;\r\n`\r\nconst DropView = styled.View`\r\n    position: absolute;\r\n    box-shadow: 0 4px 3px #00000022;\r\n    background-color: white;\r\n    top: 42px;\r\n    left: 20px;\r\n    width: 100%;\r\n    padding: 4px 5px;\r\n    border-bottom-right-radius: 10px;\r\n    border-bottom-left-radius: 10px;\r\n`\r\nconst DropItems = styled.Text`\r\n    padding: 9px 5px;\r\n    border-bottom-width: 1px;\r\n    border-bottom-color: red;\r\n    margin-bottom: 2px;\r\n`\r\n\r\nconst ODropDown = (props: ODropDownProps) => {\r\n\r\n    const [curIndex, onSelect] = React.useState(props.selectedIndex);\r\n    const [items, getItems] = React.useState(props.items);\r\n    const [isOpen, onOffToggle] = React.useState(false);\r\n    const [value, setValue] = React.useState(curIndex && items ? items[curIndex] : null);\r\n\r\n    const onSelectItem = (index: number) => {\r\n        props.onSelect(index);\r\n        onSelect(index);\r\n        if (items) {\r\n            setValue(items[index]);\r\n        }\r\n        onOffToggle(false);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (props.items) {\r\n            onSelect(0);\r\n        }\r\n        else\r\n            alert('Undefined Items')\r\n    }, [props.items])\r\n\r\n    const onToggle = () => {\r\n        onOffToggle(is_opened => !is_opened)\r\n    }\r\n        \r\n    return (\r\n        <Wrapper style={props.style}>\r\n            <InnerWrapper\r\n                onPress={onToggle}\r\n            >\r\n                {props.kindImage \r\n                    ? (<KindIcon source={props.kindImage} />)\r\n                    : null\r\n                }\r\n                <SelLabel numberOfLines={1} ellipsizeMode={'tail'}>{value || props.placeholder}</SelLabel>\r\n                <DropIcon style={{tintColor: props.dropIconColor || 'grey'}} source={require('../../assets/icons/drop_down.png')} />\r\n            </InnerWrapper>\r\n            {isOpen\r\n                ? (\r\n                    <DropView>\r\n                        {items\r\n                            ? items.map((item, index) => \r\n                                (\r\n                                    <TouchableOpacity\r\n                                        key={`key_${index}`}\r\n                                        onPress={() => onSelectItem(index)}\r\n                                    >\r\n                                        <DropItems>{item}</DropItems>\r\n                                    </TouchableOpacity>\r\n                                )\r\n                            ) \r\n                            : null\r\n                        }\r\n                    </DropView>\r\n                )\r\n                : null\r\n            }\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default ODropDown"]}