{"version":3,"sources":["OToggle.tsx"],"names":["OToggleSwitch","props","calculateDimensions","size","width","padding","circleWidth","circleHeight","translateX","offsetX","Animated","Value","dimensions","createToggleSwitchStyle","justifyContent","borderRadius","backgroundColor","isOn","onColor","offColor","trackOnStyle","trackOffStyle","createInsideCircleStyle","alignItems","margin","Platform","OS","left","position","circleColor","transform","height","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","thumbOnStyle","thumbOffStyle","onToggle","disabled","labelStyle","label","icon","toValue","timing","duration","animationSpeed","useNativeDriver","start","styles","container","StyleSheet","create","flexDirection","marginHorizontal","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    TouchableOpacity,\r\n    Animated,\r\n    Platform,\r\n    TextStyle\r\n} from \"react-native\";\r\n\r\nexport interface OToggleProps {\r\n    isOn: boolean,\r\n    label?: string,\r\n    onColor?: string,\r\n    offColor?: string,\r\n    size?: string,\r\n    labelStyle?: TextStyle,\r\n    thumbOnStyle?: any,\r\n    thumbOffStyle?: any,\r\n    trackOnStyle?: any,\r\n    trackOffStyle?: any,\r\n    onToggle: any,\r\n    icon?: any,\r\n    disabled?: boolean,\r\n    animationSpeed?: number,\r\n    useNativeDriver?: boolean,\r\n    circleColor?: string,\r\n};\r\n\r\nconst OToggleSwitch = (props: OToggleProps) : React.ReactElement => {\r\n\r\n    const calculateDimensions = (size: string) => {\r\n        switch (size) {\r\n            case \"small\":\r\n                return {\r\n                    width: 40,\r\n                    padding: 10,\r\n                    circleWidth: 15,\r\n                    circleHeight: 15,\r\n                    translateX: 22\r\n                };\r\n            case \"large\":\r\n                return {\r\n                    width: 70,\r\n                    padding: 20,\r\n                    circleWidth: 30,\r\n                    circleHeight: 30,\r\n                    translateX: 38\r\n                };\r\n            default:\r\n                return {\r\n                    width: 50,\r\n                    padding: 15,\r\n                    circleWidth: 25,\r\n                    circleHeight: 25,\r\n                    translateX: 30\r\n                };\r\n        }\r\n    }\r\n\r\n    const offsetX = new Animated.Value(0);\r\n    const dimensions = calculateDimensions(props.size || 'medium');\r\n\r\n    const createToggleSwitchStyle = () => [\r\n        {\r\n            justifyContent: \"center\",\r\n            width: dimensions.width,\r\n            borderRadius: 20,\r\n            padding: dimensions.padding,\r\n            backgroundColor: props.isOn ? props.onColor : props.offColor\r\n        },\r\n        props.isOn ? props.trackOnStyle : props.trackOffStyle\r\n    ];\r\n\r\n    const createInsideCircleStyle = () => [\r\n        {\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            margin: Platform.OS === \"web\" ? 0 : 4,\r\n            left: Platform.OS === \"web\" ? 4 : 0,\r\n            position: \"absolute\",\r\n            backgroundColor: props.circleColor,\r\n            transform: [{ translateX: offsetX }],\r\n            width: dimensions.circleWidth,\r\n            height: dimensions.circleHeight,\r\n            borderRadius: dimensions.circleWidth / 2,\r\n            shadowColor: \"#000\",\r\n            shadowOffset: {\r\n                width: 0,\r\n                height: 2\r\n            },\r\n            shadowOpacity: 0.2,\r\n            shadowRadius: 2.5,\r\n            elevation: 1.5\r\n        },\r\n        props.isOn ? props.thumbOnStyle : props.thumbOffStyle\r\n    ];\r\n\r\n\r\n    const { isOn, onToggle, disabled, labelStyle, label, icon } = props;\r\n\r\n    const toValue = isOn\r\n        ? dimensions.width - dimensions.translateX\r\n        : 0;\r\n\r\n    Animated.timing(offsetX, {\r\n        toValue,\r\n        duration: props.animationSpeed,\r\n        useNativeDriver: props.useNativeDriver || false,\r\n    }).start();\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            {label ? (\r\n                <Text style={[styles.labelStyle, labelStyle]}>{label}</Text>\r\n            ) : null}\r\n            <TouchableOpacity\r\n                style={createToggleSwitchStyle()}\r\n                activeOpacity={0.8}\r\n                onPress={() => (disabled ? null : onToggle(!isOn))}\r\n            >\r\n                <Animated.View style={createInsideCircleStyle()}>\r\n                    {icon}\r\n                </Animated.View>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\"\r\n    },\r\n    labelStyle: {\r\n        marginHorizontal: 10\r\n    }\r\n});\r\n\r\nOToggleSwitch.defaultProps = {\r\n    isOn: false,\r\n    onColor: \"#4cd137\",\r\n    offColor: \"#ecf0f1\",\r\n    size: \"medium\",\r\n    labelStyle: {},\r\n    thumbOnStyle: {},\r\n    thumbOffStyle: {},\r\n    trackOnStyle: {},\r\n    trackOffStyle: {},\r\n    icon: null,\r\n    disabled: false,\r\n    animationSpeed: 300,\r\n    useNativeDriver: true,\r\n    circleColor: 'white'\r\n};\r\n\r\nexport default OToggleSwitch;"]}