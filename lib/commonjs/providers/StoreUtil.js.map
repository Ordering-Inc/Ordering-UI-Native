{"version":3,"sources":["StoreUtil.tsx"],"names":["useLocalStorage","key","defaultValue","stored","window","localStorage","getItem","initial","JSON","parse","value","setValue","setItem","stringify","_retrieveStoreData","AsyncStorage","error","console","log","_setStoreData","val"],"mappings":";;;;;;;AACA;;AACA;;;;AAEA;AAEO,MAAMA,eAAe,GAAG,CAACC,GAAD,EAAcC,YAAd,KAAuC;AAClE,QAAMC,MAAM,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAf;AACA,QAAMM,OAAO,GAAGJ,MAAM,GAAGK,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAH,GAAwBD,YAA9C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoB,qBAASJ,OAAT,CAA1B;AAEA,wBAAU,MAAM;AACZH,IAAAA,MAAM,CAACC,YAAP,CAAoBO,OAApB,CAA4BX,GAA5B,EAAiCO,IAAI,CAACK,SAAL,CAAeH,KAAf,CAAjC;AACH,GAFD,EAEG,CAACT,GAAD,EAAMS,KAAN,CAFH;AAIA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACH,CAVM,C,CAYP;;;;;AAGO,MAAMG,kBAAkB,GAAG,MAAOb,GAAP,IAAuB;AACrD,MAAI;AACA,UAAMS,KAAK,GAAG,MAAMK,sBAAaT,OAAb,CAAqBL,GAArB,CAApB;;AACA,QAAIS,KAAK,KAAK,IAAd,EAAoB;AAChB;AACA,aAAOA,KAAP;AACH;AACJ,GAND,CAME,OAAOM,KAAP,EAAc;AACZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,oEAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAZM;;;;AAcA,MAAMG,aAAa,GAAG,CAAClB,GAAD,EAAcmB,GAAd,KAA2B;AACpD,MAAI;AACAL,0BAAaH,OAAb,CACIX,GADJ,EAEI,OAAQmB,GAAR,KAAiB,QAAjB,GAA4BA,GAA5B,GAAkCZ,IAAI,CAACK,SAAL,CAAeO,GAAf,CAFtC;AAIH,GALD,CAKE,OAAOJ,KAAP,EAAc;AACZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,mEAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAXM","sourcesContent":["\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\nimport { useEffect, useState } from 'react'\r\n\r\n// localStorage Hook --------------------\r\n\r\nexport const useLocalStorage = (key: string, defaultValue: string) => {\r\n    const stored = window.localStorage.getItem(key);\r\n    const initial = stored ? JSON.parse(stored) : defaultValue;\r\n    const [value, setValue] = useState(initial);\r\n\r\n    useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n    }, [key, value]);\r\n\r\n    return [value, setValue];\r\n};\r\n\r\n// End of LocalStorage Hook -------------\r\n\r\n\r\nexport const _retrieveStoreData = async (key: string) => {\r\n    try {\r\n        const value = await AsyncStorage.getItem(key);\r\n        if (value !== null) {\r\n            // We have data!!\r\n            return value\r\n        }\r\n    } catch (error) {\r\n        // Error retrieving data\r\n        console.log('--------------- Occured Storage Fetching Data error --------------')\r\n        console.log(error)\r\n    }\r\n};\r\n\r\nexport const _setStoreData = (key: string, val: any) => {\r\n    try {\r\n        AsyncStorage.setItem(\r\n            key,\r\n            typeof (val) === 'string' ? val : JSON.stringify(val)\r\n        )\r\n    } catch (error) {\r\n        // Error retrieving data\r\n        console.log('--------------- Occured Storage Setting Data error --------------')\r\n        console.log(error)\r\n    }\r\n};"]}